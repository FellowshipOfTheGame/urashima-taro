using UnityEngine;
using UnityEngine.UI;
using UnityEngine.EventSystems;
using TMPro;

public class InventorySlot : MonoBehaviour
{
    [SerializeField] private Image icon;

    ItemSO item;
    private TextMeshProUGUI quantityText;
    public float iconSize;

    // Sprite with size 251x251 used as example to resize sprites (kame)
    private const float exempleWidth = 251f;
    private const float exempleHeight = 251f;
    private const float sizeFactor = 0.25f;

    private Vector2 posiMouse;
    private Vector2 posiObjeto;
    private float r = 50f;      // size of the inventorySlot 'button', this value should be autogenerated

    [SerializeField] private GameObject wearWeaponButton;
    [SerializeField] private GameObject useConsumableButton;
    [SerializeField] private GameObject garbageButton;
    [SerializeField] private GameObject wearArmorButton;
    private UseConsumable useConsumable;
    private Garbage garbage;
    private WearWeapon wearWeapon;
    private WearArmor wearArmor;

    private void Start()
    {        
        quantityText = gameObject.GetComponentInChildren<TextMeshProUGUI>();
    }

    private void Update()
    {
        TestItemSelection();
    }

    private void TestItemSelection()
    {
        // Tests the mouse click button was pressed
        if (Input.GetMouseButtonDown(0))
        {
            // Checks if there is an item in this inventory slot
            if (item != null)
            {
                posiObjeto = (Vector2)this.gameObject.transform.position;
                posiMouse = (Vector2)Input.mousePosition;

                // Checks if the player clicked inside this slot square
                if (HasSelectedThisSlot(posiObjeto.x, posiObjeto.y, posiMouse.x, posiMouse.y, r))
                {
                    switch(item.type)
                    {
                        case ItemType.Consumable:
                            OnConsumableItemSelection();
                            break;
                        case ItemType.Weapon:
                            OnWeaponItemSelection();
                            break;
                        case ItemType.Armor:
                            OnArmorItemSelection();
                            break;
                    }
                }
            }
        }
    }

    // Auxiliar function to set all buttons but garbage button to false and to
    // atribute the selected ITEM to the Garbage item script
    private void OnSelectionAuxiliar()
    {
        wearWeaponButton.SetActive(false);
        wearArmorButton.SetActive(false);
        useConsumableButton.SetActive(false);
        garbageButton.SetActive(true);
        garbage = garbageButton.GetComponent<Garbage>();
        garbage.item = item;
    }

    private void OnConsumableItemSelection()
    {
        OnSelectionAuxiliar();
        useConsumableButton.SetActive(true);
        useConsumable = useConsumableButton.GetComponent<UseConsumable>();
        useConsumable.item = item;
    }

    private void OnWeaponItemSelection()
    {
        OnSelectionAuxiliar();
        wearWeaponButton.SetActive(true);
        wearWeapon = wearWeaponButton.GetComponent<WearWeapon>();
        wearWeapon.item = item;
    }

    private void OnArmorItemSelection()
    {
        OnSelectionAuxiliar();
        wearArmorButton.SetActive(true);
        wearArmor = wearArmorButton.GetComponent<WearArmor>();
        wearArmor.item = item;
    }

    // Temporary function until I or someone think aboua a better solution to select weapons
    // this function set false to all weapon scripts, so it deactivate weapons
    private void SetActiveFalseAllWeapons()
    {
        GameObject.FindWithTag("Player").GetComponent<Tiro>().enabled = false;
    }

    private bool HasSelectedThisSlot(float m, float n, float x, float y, float r)
    {
        if (-r <= (x - m) && (x - m) <= r &&
           (-r <= (y - n) && (y - n) <= r))
            return true;
        return false;
    }

    private void ResizeSprite()
    {
        float originalWidth = icon.preferredWidth;
        float originalHeight = icon.preferredHeight;
        float widthFactor = iconSize * exempleWidth * sizeFactor / originalWidth;
        float heightFactor = iconSize * exempleHeight * sizeFactor / originalHeight;
        icon.rectTransform.sizeDelta = new Vector2(widthFactor * originalWidth, heightFactor*originalHeight);
    }

    public void AddItem(ItemSO newItem)
    {
        item = newItem;
        icon.sprite = item.icon;

        ResizeSprite();

        icon.enabled = true;
        quantityText.text = item.quantity.ToString();
    }

    // Maybe this function can be usefull latter
    public void UpdateQuantity()
    {
        quantityText.text = (item.quantity).ToString();
    }

    public void ClearSlot()
    {
        item = null;

        icon.sprite = null;
        icon.enabled = false;
        if(quantityText != null)
            quantityText.text = "";
    }
}
